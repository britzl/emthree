local emthree = require "emthree.emthree"
local effects = require "emthree.effects"
local block_color = require "examples.ocean-commotion.color"
local block_type = require "examples.ocean-commotion.type"

local blocksize = 96		-- Distance between block centers
local boardwidth = 6		-- Number of columns
local boardheight = 9		-- Number of rows

--
-- The list of fishes that are used. These names must match animations/images
-- in the atlas used for fishes.
--
--
local colors = {
	block_color.YELLOW,
	block_color.BLUE,
	block_color.ORANGE,
	block_color.PURPLE,
	block_color.GREEN,
	block_color.RED
}

local function is_striped(block)
	return block.type == block_type.STRIPED_V or block.type == block_type.STRIPED_H
end

local function is_striped_vertical(block)
	return block.type == block_type.STRIPED_V
end

local function is_striped_horizontal(block)
	return block.type == block_type.STRIPED_H
end

local function is_wrapped(block)
	return block.type == block_type.WRAPPED
end

local function is_bomb(block)
	return block.type == block_type.BOMB
end

local function create_block(board, position, type, color)
	if not type and not color then
		color = color or colors[math.random(#colors)]
		type = type or block_type.PLAIN
	end
	local id = factory.create("#fish_factory", position, null, { color = color, type = type })
	msg.post(id, "set_parent", { parent_id = go.get_id(), keep_world_transform = 0 })
	return id, color, type
end

local function create_blocker(board, position, type)
	local id = factory.create("#fish_factory", position, null, { color = nil, type = type })
	msg.post(id, "set_parent", { parent_id = go.get_id(), keep_world_transform = 0 })
	return id, type
end


local function on_match(board, block, horisontal_neighbors, vertical_neighbors)
	-- handle t, l and cross shaped formations
	if #horisontal_neighbors >= 2 and #vertical_neighbors >= 2 then
		emthree.remove_blocks(board, horisontal_neighbors)
		emthree.remove_blocks(board, vertical_neighbors)
		emthree.change_block(block, block_type.WRAPPED, block.color)
	elseif #horisontal_neighbors >= 4 then
		emthree.remove_blocks(board, horisontal_neighbors)
		emthree.change_block(block, block_type.BOMB, nil)
	elseif #horisontal_neighbors == 3 then
		emthree.remove_blocks(board, horisontal_neighbors)
		emthree.change_block(block, block_type.STRIPED_V, block.color)
	elseif #horisontal_neighbors == 2 then
		emthree.remove_block(board, block)
		emthree.remove_blocks(board, horisontal_neighbors)
	elseif #vertical_neighbors >= 4 then
		emthree.remove_blocks(board, vertical_neighbors)
		emthree.change_block(block, block_type.BOMB, nil)
	elseif #vertical_neighbors == 3 then
		emthree.remove_blocks(board, vertical_neighbors)
		emthree.change_block(block, block_type.STRIPED_H, block.color)
	elseif #vertical_neighbors == 2 then
		emthree.remove_block(board, block)
		emthree.remove_blocks(board, vertical_neighbors)
	end
end


local function on_block_removed(board, block)
	if is_striped_horizontal(block) then
		effects.horisontal_lineblast(board, block)
	elseif is_striped_vertical(block) then
		effects.vertical_lineblast(board, block)
	elseif is_wrapped(block) then
		effects.bomb(board, block, 1)
	elseif is_bomb(block) then
		effects.remove_color(board, block.color)
	end
end

--
-- Handle swapping of special blocks and trigger desired effect
--
local function on_swap(board, block1, block2)
	if is_bomb(block1) and is_bomb(block2) then
		effects.remove_all(board)
		return true
	elseif (is_striped_vertical(block1) and is_striped_vertical(block2)) or (is_striped_horizontal(block1) and is_striped_horizontal(block2)) then
		emthree.change_block(block1, block_type.STRIPED_H, block1.color)
		emthree.change_block(block2, block_type.STRIPED_V, block2.color)
		emthree.remove_block(board, block1)
		emthree.remove_block(board, block2)
		return true
	elseif is_striped(block1) and is_striped(block2) then
		emthree.remove_block(board, block1)
		emthree.remove_block(board, block2)
		return true
	elseif is_wrapped(block1) and is_wrapped(block2) then
		emthree.remove_block(board, block2, true)
		effects.bomb(board, block1, 2)
		local wrapped = emthree.create_block(board, block2.x, block2.y, block_type.WRAPPED, block2.color)
		emthree.stabilize(board)
		emthree.remove_block(board, wrapped)
		return true
	elseif (is_striped(block1) or is_striped(block2)) and (is_wrapped(block1) or is_wrapped(block2)) then
		effects.horisontal_lineblast(board, block1, 3)
		effects.vertical_lineblast(board, block2, 3)
		return true
	elseif (is_bomb(block1) or is_bomb(block2)) and (is_striped(block1) or is_striped(block2)) then
		print("bomb+striped - add code to convert to striped and trigger them")
		return true
	elseif (is_bomb(block1) or is_bomb(block2)) and (is_wrapped(block1) or is_wrapped(block2)) then
		print("bomb+wrapped - add code")
		return true
	elseif is_bomb(block1) or is_bomb(block2) then
		effects.remove_color(board, is_bomb(block1) and block2.color or block1.color)
		emthree.remove_block(board, is_bomb(block1) and block1 or block2, true)
		return true
	end
	return false
end

local function change_block(type, color)
	return function(board, action)
		local x, y = emthree.screen_to_slot(board, action.x, action.y)
		local block = emthree.get_block(board, x, y)
		if block then
			emthree.change_block(block, type or block.type, color or block.color)
		end
	end
end

local function delete_block(board, action)
	local x, y = emthree.screen_to_slot(board, action.x, action.y)
	local block = emthree.get_block(board, x, y)
	if block then
		emthree.remove_block(board, block, true)
	end
end

-- create a board with a specific setup
local function debug_board(board)
	-- 1 = YELLOW,
	-- 2 = BLUE,
	-- 3 = ORANGE,
	-- 4 = PURPLE,
	-- 5 = GREEN,
	-- 6 = RED
	local BOARD =
		"545562" ..
		"145211" ..
		"V34353" ..
		"343226" ..
		"VH3165" ..
		"1B2114" ..
		"524226" ..
		"2446H5"
		
	for y=0,boardheight-2 do
		for x=0,boardwidth-1 do
			local i = 1 + ((boardheight - 2 - y) * boardwidth) + x
			local slot = BOARD:sub(i, i)
			if slot == "1" then
				emthree.create_block(board, x, y, block_type.PLAIN, colors[1])
			elseif slot == "2" then
				emthree.create_block(board, x, y, block_type.PLAIN, colors[2])
			elseif slot == "3" then
				emthree.create_block(board, x, y, block_type.PLAIN, colors[3])
			elseif slot == "4" then
				emthree.create_block(board, x, y, block_type.PLAIN, colors[4])
			elseif slot == "5" then
				emthree.create_block(board, x, y, block_type.PLAIN, colors[5])
			elseif slot == "6" then
				emthree.create_block(board, x, y, block_type.PLAIN, colors[6])
			elseif slot == "B" then
				emthree.create_block(board, x, y, block_type.BOMB, colors[1])
			elseif slot == "H" then
				emthree.create_block(board, x, y, block_type.STRIPED_H, colors[1])
			elseif slot == "V" then
				emthree.create_block(board, x, y, block_type.STRIPED_V, colors[1])
			elseif slot == "W" then
				emthree.create_block(board, x, y, block_type.WRAPPED, colors[1])
			end
		end
	end

end


--
-- INIT the board
--
function init(self)
	self.board = emthree.create_board(boardwidth, boardheight, blocksize)
	emthree.on_create_block(self.board, create_block)
	emthree.on_create_blocker(self.board, create_blocker)
	emthree.on_match(self.board, on_match)
	emthree.on_block_removed(self.board, on_block_removed)
	emthree.on_swap(self.board, on_swap)
	emthree.on_no_possible_switches(self.board, function() emthree.shuffle(self.board) end)

	-- start the board
	for x=0,boardwidth-1 do
		emthree.create_spawner(self.board, x, boardheight - 1, "SPAWNER")
	end
	--debug_board(self.board)
	emthree.fill_board(self.board)
	emthree.stabilize(self.board, function()
		msg.post(".", "acquire_input_focus")
	end)

	self.on_touch = emthree.on_input
end

--
-- INPUT HANDLING
--
function on_input(self, action_id, action)
	if action_id == hash("touch") and (action.pressed or action.released) then
		return self.on_touch(self.board, action)
	elseif action_id == hash("wrapped") and action.released then
		self.on_touch = change_block(block_type.WRAPPED, nil)
	elseif action_id == hash("bomb") and action.released then
		self.on_touch = change_block(block_type.BOMB, nil)
	elseif action_id == hash("horizontal") and action.released then
		self.on_touch = change_block(block_type.STRIPED_H, nil)
	elseif action_id == hash("vertical") and action.released then
		self.on_touch = change_block(block_type.STRIPED_V, nil)
	elseif action_id == hash("color1") and action.released then
		self.on_touch = change_block(block_type.PLAIN, colors[1])
	elseif action_id == hash("color2") and action.released then
		self.on_touch = change_block(block_type.PLAIN, colors[2])
	elseif action_id == hash("color3") and action.released then
		self.on_touch = change_block(block_type.PLAIN, colors[3])
	elseif action_id == hash("color4") and action.released then
		self.on_touch = change_block(block_type.PLAIN, colors[4])
	elseif action_id == hash("color5") and action.released then
		self.on_touch = change_block(block_type.PLAIN, colors[5])
	elseif action_id == hash("color6") and action.released then
		self.on_touch = change_block(block_type.PLAIN, colors[6])
	elseif action_id == hash("delete") and action.released then
		self.on_touch = delete_block
	elseif action_id == hash("stabilize") and action.released then
		emthree.stabilize(self.board)
	elseif action_id == hash("cancel") and action.released then
		self.on_touch = emthree.on_input
	elseif action_id == hash("dump") and action.released then
		print(emthree.dump(self.board))
	end
end

function on_reload(self)
end
